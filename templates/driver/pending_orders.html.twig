{% extends 'base.html.twig' %}

{% block title %}Pending orders{% endblock %}

{% block stylesheets %}
    <style>
        .form-group {
            margin-top: 20px;
        }

        input, select {
            display: block;
        }

        button {
            padding: 5px 10px;
            background: transparent;
            border: 1px solid #333;
            color: #333;

        }
    </style>

{% endblock %}

{% block body %}
    <div id="new-order-container" class="container">
        <div class="map" id="area-map"></div>
        <div id="content" class="content-container">
            <button onclick="alert('Journey canceled')">Finish order</button>
        </div>
    </div>

    <script>
        const container = document.getElementById("content")
        const newOrderContainer = document.getElementById("new-order-container")
        const mapArea = document.getElementById("area-map")

        container.addEventListener("click", () => {
            newOrderContainer.classList.add("active")
        })

        mapArea.addEventListener("click", () => {
            newOrderContainer.classList.remove("active")
        })

        const map = L.map('area-map').setView([54.903914, 23.958851], 13);

        L.tileLayer(
            "https://api.maptiler.com/maps/basic/{z}/{x}/{y}.png?key=ltrALA6k9d2bkEeRn8Fn",
            {
                attribution:
                    '<a href="https://www.maptiler.com/copyright/" target="_blank">© MapTiler</a> <a href="https://www.openstreetmap.org/copyright" target="_blank">© OpenStreetMap contributors</a>'
            }
        ).addTo(map);



        {% for order in pendingOrders %}
        console.log({{ order.id }})
        console.log('LAT',{{ order.latCoordinateDestination }})
        console.log('LNG',{{  order.lngCoordinateDestination }})
        L.marker([{{ order.latCoordinateDestination }}, {{ order.lngCoordinateDestination }}]).addTo(map).on('click',
            () =>{
                let assignOrderUrl = "{{ url('driver_assign_order', {'id': order.id}) }}"

                fetch(assignOrderUrl, {method: 'POST'})
                    .then((response) => {
                        console.log(response)
                        return response.json();
                    })
                    .then((data) => {
                        console.log(data);
                    });
            }


        );
        {% endfor %}



        function getCurrentDeviceLocation() {
            if (navigator.geolocation) {
                return navigator.geolocation.getCurrentPosition(showPosition);
            } else {
                console.error("User disabled its location");
            }
        }

        function showPosition(position) {
            return {lat: position.coords.latitude, long: position.coords.longitude}
        }


    </script>
{% endblock %}
