{% extends 'base.html.twig' %}

{% block title %}Pending orders{% endblock %}

{% block stylesheets %}
    <style>
        .form-group {
            margin-top: 20px;
        }

        input, select {
            display: block;
        }

        button, .driver-activity a {
            padding: 5px 10px;
            background: transparent;
            border: 1px solid #333;
            color: #333;
            text-decoration: none;

        }

        #area-map {
            height: 100vh;
        }


        .take-order {
            padding: 4px 8px;
            border: 1px solid #333;
            color: #333;
            text-decoration: none;
        }

        .container {
            position: relative;
        }

        .driver-activity {
            position: absolute;
            top: 20px;
            right: 20px;
            padding: 20px;
            z-index: 400;
            background: rgba(255, 255, 255, 0.7);
        }
    </style>

{% endblock %}

{% block body %}
    <div id="pending-orders-container" class="container">
        <div class="map" id="area-map"></div>

        <div class="driver-activity">
            <p>Current status: <span id="current-status"></span></p>
            <a href="{{ path("assign_status", {isWorking: 'true'}) }}">Start work</a>
            <a href="{{ path("assign_status", {isWorking: 'false'}) }}">End work</a>
        </div>
        <div id="content" class="content-container">
        </div>
    </div>

    <script>
        const map = L.map('area-map').setView([54.903914, 23.958851], 13);

        let isDriverActive = false

        let isWorking = {{ driver.isWorking|json_encode() }};

        document.addEventListener("DOMContentLoaded", () => {
            const statusSpan = document.getElementById("current-status")
            statusSpan.innerText = isWorking ? 'Currently working' : 'Not working'
            statusSpan.classList.add(isWorking ? 'working' : 'off')
        })

        const setIsDriverActive = (status) => {

        }
        L.tileLayer(
            "https://api.maptiler.com/maps/basic/{z}/{x}/{y}.png?key=ltrALA6k9d2bkEeRn8Fn",
            {
                attribution:
                    '<a href="https://www.maptiler.com/copyright/" target="_blank">© MapTiler</a> <a href="https://www.openstreetmap.org/copyright" target="_blank">© OpenStreetMap contributors</a>'
            }
        ).addTo(map);


        let url = ''
        let takeLink = ''
        {% if driver.isWorking == true %}

        {% for order in pendingOrders %}
        console.log('LAT',{{ order.latCoordinateDestination }})
        console.log('LNG',{{ order.lngCoordinateDestination }})
        url = "{{ url('driver_assign_order', {'id': order.id}) }}"
        takeLink = document.createElement('a')
        takeLink.href = url
        takeLink.classList.add('take-order')
        takeLink.innerText = "Take"
        L.marker([{{ order.latCoordinateDestination }}, {{ order.lngCoordinateDestination }}]).addTo(map).bindPopup(takeLink);

        {#);#}
        {% endfor %}
        {% endif %}


        function getCurrentDeviceLocation() {
            if (navigator.geolocation) {
                return navigator.geolocation.getCurrentPosition(showPosition);
            } else {
                console.error("User disabled its location");
            }
        }

        function showPosition(position) {
            return {lat: position.coords.latitude, long: position.coords.longitude}
        }


    </script>
{% endblock %}
